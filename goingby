{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "TPU",
    "colab": {
      "name": "14_Unet_Depth_2+Aug.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.5.0"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/gundasai/general/blob/master/goingby\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "mCvUJesKo3kc"
      },
      "source": [
        "## Semantic Segmentation using Covolutional Neural Network"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "uxw4V2odbp2Z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "c75933ba-2e60-4f13-80a4-8fabe9812e6e"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "-CCR1yilkval",
        "colab": {}
      },
      "source": [
        "import keras\n",
        "keras.backend.clear_session()"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "JVd83jPNk3Iy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f98e7dd0-c6f6-4bbc-f674-445c8c5c80d1"
      },
      "source": [
        "import tensorflow as tf\n",
        "if tf.test.gpu_device_name():\n",
        "    print('Default GPU Device: {}'.format(tf.test.gpu_device_name()))\n",
        "else:\n",
        "    print(\"Please install GPU version of TF\")"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Please install GPU version of TF\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "1sySsJGiYH5p"
      },
      "source": [
        "## Reproducibiity"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "hNUt5vS_YHjn",
        "colab": {}
      },
      "source": [
        "import keras\n",
        "import numpy as np\n",
        "import random\n",
        "import tensorflow as tf\n",
        "\n",
        "keras.backend.clear_session()\n",
        "random.seed(42)\n",
        "np.random.seed(42)\n",
        "#tf.set_random_seed(42)"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "ZAfdCD53pGRj"
      },
      "source": [
        "### Importing the  Library Functions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "Rxrj7W0cdD7Z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "outputId": "65a00688-e240-41ee-c156-1fadc252092d"
      },
      "source": [
        "from keras.layers import *\n",
        "import keras\n",
        "from keras.models import Sequential,Model\n",
        "import cv2\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "!pip install medpy\n",
        "from medpy.metric import dc, precision, recall,jc\n",
        "#!pip install -U scipy==1.2.0\n",
        "import os\n",
        "import cv2\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.utils import shuffle"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: medpy in /usr/local/lib/python3.6/dist-packages (0.4.0)\n",
            "Requirement already satisfied: numpy>=1.11.0 in /usr/local/lib/python3.6/dist-packages (from medpy) (1.18.5)\n",
            "Requirement already satisfied: SimpleITK>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from medpy) (1.2.4)\n",
            "Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from medpy) (1.4.1)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "2QEzetiF-fnn",
        "colab": {}
      },
      "source": [
        "#!pip install -U scipy==1.2.0\n",
        "#from scipy.misc import imsave"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "3AZr2mFUpQY6"
      },
      "source": [
        "### Loading Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "SnpIJYJKjp4f",
        "colab": {}
      },
      "source": [
        "#import os\n",
        "#os.getcwd() \n",
        "!pip install --quiet nibabel\n",
        "import nibabel as nib\n",
        "import matplotlib.pylab as plt\n",
        "import numpy as np\n",
        "import os"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "Shk_5BDYdEGJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "1e8f8433-a4ca-4c13-ebbe-4a82d8cb19e2"
      },
      "source": [
        "trainx=[]\n",
        "trainy=[]\n",
        "for i in range(1,7):\n",
        "  img=nib.load(os.path.join('/content/drive/My Drive/imagesTr/','iseg_' + str(i) + '_0000.nii.gz')).get_data()\n",
        "  trainx.append(img)\n",
        "  img=nib.load(os.path.join('/content/drive/My Drive/imagesTr/','iseg_' + str(i) + '_0001.nii.gz')).get_data()\n",
        "  trainx.append(img)\n",
        "  img=nib.load(os.path.join('/content/drive/My Drive/labelsTr/','iseg_' + str(i) + '.nii.gz')).get_data()\n",
        "  trainy.append(img)\n",
        "  trainy.append(img)\n",
        "import numpy as np\n",
        "trainx=np.array(trainx)\n",
        "trainy=np.array(trainy)\n",
        "validx=[]\n",
        "validy=[]\n",
        "testx=[]\n",
        "testy=[]\n",
        "validx=np.array(trainx)\n",
        "validy=np.array(trainy)\n",
        "testx=np.array(trainx)\n",
        "testy=np.array(trainy)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: DeprecationWarning: get_data() is deprecated in favor of get_fdata(), which has a more predictable return type. To obtain get_data() behavior going forward, use numpy.asanyarray(img.dataobj).\n",
            "\n",
            "* deprecated from version: 3.0\n",
            "* Will raise <class 'nibabel.deprecator.ExpiredDeprecationError'> as of version: 5.0\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: DeprecationWarning: get_data() is deprecated in favor of get_fdata(), which has a more predictable return type. To obtain get_data() behavior going forward, use numpy.asanyarray(img.dataobj).\n",
            "\n",
            "* deprecated from version: 3.0\n",
            "* Will raise <class 'nibabel.deprecator.ExpiredDeprecationError'> as of version: 5.0\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: DeprecationWarning: get_data() is deprecated in favor of get_fdata(), which has a more predictable return type. To obtain get_data() behavior going forward, use numpy.asanyarray(img.dataobj).\n",
            "\n",
            "* deprecated from version: 3.0\n",
            "* Will raise <class 'nibabel.deprecator.ExpiredDeprecationError'> as of version: 5.0\n",
            "  \n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "1eqDi0qMRCOe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "outputId": "39cb82db-222b-4e41-932b-f9186c6209b3"
      },
      "source": [
        "print(len(trainx))\n",
        "print(len(trainy))\n",
        "print(trainx.shape)\n",
        "print(trainy.shape)\n",
        "\n",
        "print(len(validx))\n",
        "print(len(validy))\n",
        "print(validx.shape)\n",
        "print(validy.shape)\n",
        "\n",
        "print(len(testx))\n",
        "print(len(testy))\n",
        "print(testx.shape)\n",
        "print(testy.shape)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "12\n",
            "12\n",
            "(12, 144, 192, 256)\n",
            "(12, 144, 192, 256)\n",
            "12\n",
            "12\n",
            "(12, 144, 192, 256)\n",
            "(12, 144, 192, 256)\n",
            "12\n",
            "12\n",
            "(12, 144, 192, 256)\n",
            "(12, 144, 192, 256)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "j9EM9P3zr4Na",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "outputId": "feb686f7-67f9-4adf-e5f7-3d588dd79278"
      },
      "source": [
        "print(np.max(trainx[0]))\n",
        "print(np.min(trainx[0]))\n",
        "\n",
        "print(np.max(trainy[0]))\n",
        "print(np.min(trainy[0]))"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1000\n",
            "0\n",
            "3\n",
            "0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "aFkp4ofiri_b",
        "colab": {}
      },
      "source": [
        "trainy = trainy/255\n",
        "validy = validy/255\n",
        "testy  = testy/255"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "YekXmy0RnqiK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "outputId": "c0f62c0f-0a3a-42eb-e454-2ab8366896de"
      },
      "source": [
        "print(np.max(trainx[0]))\n",
        "print(np.min(trainx[0]))\n",
        "\n",
        "print(np.max(trainy[0]))\n",
        "print(np.min(trainy[0]))"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1000\n",
            "0\n",
            "0.011764705882352941\n",
            "0.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "Sha_Q7V0UPTE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "outputId": "3023bc1f-9109-44c0-e5f3-849556d081b4"
      },
      "source": [
        "print(np.max(trainx[0]),np.max(validx[0]),np.max(testx[0]))\n",
        "print(np.min(trainx[0]),np.min(validx[0]),np.min(testx[0]))\n",
        "\n",
        "\n",
        "print(np.min(trainy[0]),np.min(validy[0]),np.min(testy[0]))\n",
        "print(np.max(trainy[0]),np.max(validy[0]),np.max(testy[0]))"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1000 1000 1000\n",
            "0 0 0\n",
            "0.0 0.0 0.0\n",
            "0.011764705882352941 0.011764705882352941 0.011764705882352941\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "eiF_zt7ypUp1"
      },
      "source": [
        "### Visualizing Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "vYg9kp4xdEIo",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        },
        "outputId": "0ec47508-19cc-4052-bc50-cb16511435f1"
      },
      "source": [
        "plt.figure(figsize=(20,20))\n",
        "plt.subplot(121).imshow(np.take(trainx[2], 180, 2))\n",
        "plt.subplot(122).imshow(np.take(trainy[2],180,2))"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7ff23c5b06d8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x1440 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "-_Nkl_O1pbTI"
      },
      "source": [
        "### Data Pre-Processing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "1V1LJd2Xpk8k"
      },
      "source": [
        "#### 1. Reshape"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "-1DiOV0akHwB",
        "colab": {}
      },
      "source": [
        "trainx = np.reshape(trainx,(-1,192,256,1))\n",
        "trainy = np.reshape(trainy,(-1,192,256,1))\n",
        "\n",
        "validx = np.reshape(validx,(-1,192,256,1))\n",
        "validy = np.reshape(validy,(-1,192,256,1))\n",
        "\n",
        "testx = np.reshape(testx,(-1,192,256,1))\n",
        "testy = np.reshape(testy,(-1,192,256,1))"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "NWjV0OtBkHzI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        },
        "outputId": "1cc1f1a8-81c2-450f-9c3a-d8f407e04581"
      },
      "source": [
        "print(trainx.shape)\n",
        "print(trainy.shape)\n",
        "\n",
        "print(validx.shape)\n",
        "print(validy.shape)\n",
        "\n",
        "print(testx.shape)\n",
        "print(testy.shape)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1728, 192, 256, 1)\n",
            "(1728, 192, 256, 1)\n",
            "(1728, 192, 256, 1)\n",
            "(1728, 192, 256, 1)\n",
            "(1728, 192, 256, 1)\n",
            "(1728, 192, 256, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NW4N-Kz0D9ow",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 259
        },
        "outputId": "57ba0b0f-a4b8-49c5-ab1b-e2e6960fb1f2"
      },
      "source": [
        "plt.figure(figsize=(10,10))\n",
        "plt.subplot(121).imshow(np.take(trainx[170], 0, 2))\n",
        "plt.subplot(122).imshow(np.take(trainy[170],0,2))"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7ff23b07e240>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "N9EgDvNRpy_5"
      },
      "source": [
        "#### 2. Normalization"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "yaz_bIMOkH2N",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "4afce04e-8970-4de3-c72c-36883fdc8b87"
      },
      "source": [
        "mean = np.mean(trainx)\n",
        "std  = np.std(trainx)\n",
        "\n",
        "print(mean)\n",
        "print(std)\n",
        "\n",
        "trainx = trainx-mean\n",
        "trainx = trainx/std\n",
        "\n",
        "testx = testx-mean\n",
        "testx = testx/std\n",
        "\n",
        "validx = validx-mean\n",
        "validx = validx/std"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "33.25401631108037\n",
            "99.0179339076456\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "Jve_L1xGp4bk"
      },
      "source": [
        "### Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "8d7T_CQPkH8P",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 847
        },
        "outputId": "96c3f33c-d6cd-4de5-ee7d-a1db79b8fcf2"
      },
      "source": [
        "def unet_depth2(input_height=192, input_width=256):\n",
        "\n",
        "    img_input = Input(shape=(input_height,input_width,1))\n",
        "\n",
        "    conv1 = Conv2D(32, (3, 3), activation='relu', padding='same')(img_input)\n",
        "    conv1 = Conv2D(32, (3, 3), activation='relu', padding='same')(conv1)\n",
        "    pool1 = MaxPooling2D((2, 2))(conv1)\n",
        "    \n",
        "    conv2 = Conv2D(64, (3, 3), activation='relu', padding='same')(pool1)\n",
        "    conv2 = Conv2D(64, (3, 3), activation='relu', padding='same')(conv2)\n",
        "    pool2 = MaxPooling2D((2, 2))(conv2)\n",
        "\n",
        "    conv3 = Conv2D(128, (3, 3), activation='relu', padding='same')(pool2)\n",
        "    conv3 = Conv2D(128, (3, 3), activation='relu', padding='same')(conv3)\n",
        "    up1 = UpSampling2D((2, 2))(conv3)\n",
        "    \n",
        "    skip1  = concatenate([up1,conv2])\n",
        "    \n",
        "    conv4 = Conv2D(64, (3, 3), activation='relu', padding='same')(skip1)\n",
        "    conv4 = Conv2D(64, (3, 3), activation='relu', padding='same')(conv4)\n",
        "    up2 = UpSampling2D((2, 2))(conv4)\n",
        "    \n",
        "    skip2  = concatenate([up2,conv1])\n",
        "    \n",
        "    conv5 = Conv2D(32, (3, 3), activation='relu', padding='same')(skip2)\n",
        "    conv5 = Conv2D(32, (3, 3), activation='relu', padding='same')(conv5)\n",
        "    \n",
        "    drop1 = Dropout(0.5)(conv5)\n",
        "   \n",
        "    o = Conv2D( 1, (1, 1),activation = 'sigmoid' ,padding='same')(drop1)\n",
        "    \n",
        "    model = Model(inputs=[img_input], outputs=[ o ])\n",
        "    \n",
        "    return model\n",
        "\n",
        "model=unet_depth2()\n",
        "model.summary()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"functional_1\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_1 (InputLayer)            [(None, 192, 256, 1) 0                                            \n",
            "__________________________________________________________________________________________________\n",
            "conv2d (Conv2D)                 (None, 192, 256, 32) 320         input_1[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_1 (Conv2D)               (None, 192, 256, 32) 9248        conv2d[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D)    (None, 96, 128, 32)  0           conv2d_1[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_2 (Conv2D)               (None, 96, 128, 64)  18496       max_pooling2d[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_3 (Conv2D)               (None, 96, 128, 64)  36928       conv2d_2[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2D)  (None, 48, 64, 64)   0           conv2d_3[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_4 (Conv2D)               (None, 48, 64, 128)  73856       max_pooling2d_1[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_5 (Conv2D)               (None, 48, 64, 128)  147584      conv2d_4[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "up_sampling2d (UpSampling2D)    (None, 96, 128, 128) 0           conv2d_5[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "concatenate (Concatenate)       (None, 96, 128, 192) 0           up_sampling2d[0][0]              \n",
            "                                                                 conv2d_3[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_6 (Conv2D)               (None, 96, 128, 64)  110656      concatenate[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_7 (Conv2D)               (None, 96, 128, 64)  36928       conv2d_6[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "up_sampling2d_1 (UpSampling2D)  (None, 192, 256, 64) 0           conv2d_7[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "concatenate_1 (Concatenate)     (None, 192, 256, 96) 0           up_sampling2d_1[0][0]            \n",
            "                                                                 conv2d_1[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_8 (Conv2D)               (None, 192, 256, 32) 27680       concatenate_1[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_9 (Conv2D)               (None, 192, 256, 32) 9248        conv2d_8[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "dropout (Dropout)               (None, 192, 256, 32) 0           conv2d_9[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_10 (Conv2D)              (None, 192, 256, 1)  33          dropout[0][0]                    \n",
            "==================================================================================================\n",
            "Total params: 470,977\n",
            "Trainable params: 470,977\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "BMt9hKk9qADH"
      },
      "source": [
        "### Model Visualization"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "p2IOsAXyhG80",
        "colab": {}
      },
      "source": [
        "from keras_preprocessing.image import ImageDataGenerator\n",
        "data_gen_args = ImageDataGenerator(featurewise_center=False,\n",
        "                                 featurewise_std_normalization=False, \n",
        "                                 samplewise_center=False,\n",
        "                                 samplewise_std_normalization=False,\n",
        "                                 horizontal_flip=True,\n",
        "                                 zoom_range=[0.8,0.9],\n",
        "                                 rotation_range=30) "
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "y4OTFtBahZoB",
        "colab": {}
      },
      "source": [
        "image_datagen = ImageDataGenerator(data_gen_args)\n",
        "mask_datagen = ImageDataGenerator(data_gen_args)\n",
        "\n",
        "seed = 2018\n",
        "bs = 32"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "dskL-r2RhraW",
        "colab": {}
      },
      "source": [
        "image_generator = image_datagen.flow(trainx, seed=seed, batch_size=bs, shuffle=True)\n",
        "mask_generator = mask_datagen.flow(trainy, seed=seed, batch_size=bs, shuffle=True)\n",
        "\n",
        "# Just zip the two generators to get a generator that provides augmented images and masks at the same time\n",
        "train_generator = zip(image_generator, mask_generator)"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "CIjXR8ZgqFu7"
      },
      "source": [
        "### Fine-tuning Tricks (callbacks)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "t-FmwHnth2Tx",
        "colab": {}
      },
      "source": [
        "import math\n",
        "from keras.callbacks import EarlyStopping,ModelCheckpoint\n",
        "os.chdir('/content/drive/My Drive/results')\n",
        "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=10)\n",
        "mc = ModelCheckpoint('unet_up2_Aug.h5', monitor='val_loss', mode='min', verbose=1, save_best_only=True)\n",
        "cv = keras.callbacks.CSVLogger('unet_up2_Aug.csv', separator=',', append=False)"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "SOtzUdZNscbg"
      },
      "source": [
        "### Metrics"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "Qn9Hit4Uh4yh",
        "colab": {}
      },
      "source": [
        "from keras import backend as K\n",
        "smooth=1\n",
        "\n",
        "def dice_coef(y_true, y_pred):\n",
        "    y_true_f = K.flatten(y_true)\n",
        "    y_pred_f = K.flatten(y_pred)\n",
        "    intersection = K.sum(y_true_f * y_pred_f)\n",
        "    return (2. * intersection + smooth) / (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n",
        "\n",
        "\n",
        "def dice_coef_loss(y_true, y_pred):\n",
        "    return -dice_coef(y_true, y_pred)"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "a-AD-2VwqRfg"
      },
      "source": [
        "### Optimizer"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "goq8YrrFk5dA",
        "colab": {}
      },
      "source": [
        "optimizer=keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=True)"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "2BNR0e0SqYwm"
      },
      "source": [
        "### Compile and Train the Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "wpsE1JwSmE1G",
        "colab": {}
      },
      "source": [
        "from keras import backend as K\n",
        "model.compile(loss=dice_coef_loss, optimizer=\"sgd\", metrics=[dice_coef,'accuracy'])"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "MJz83Z3Yu3ea",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        },
        "outputId": "586027fa-70bb-4e18-dfa7-79158df46cc9"
      },
      "source": [
        "history = model.fit_generator(train_generator, steps_per_epoch=(len(trainx) // bs),callbacks=[es,mc,cv], epochs=50,\n",
        "                              validation_data=(validx, validy))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From <ipython-input-27-bbc5037e103c>:2: Model.fit_generator (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Please use Model.fit, which supports generators.\n",
            "Epoch 1/50\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/keras_preprocessing/image/image_data_generator.py:720: UserWarning: This ImageDataGenerator specifies `featurewise_center`, but it hasn't been fit on any training data. Fit it first by calling `.fit(numpy_data)`.\n",
            "  warnings.warn('This ImageDataGenerator specifies '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "54/54 [==============================] - ETA: 0s - loss: -0.0020 - dice_coef: 0.0020 - accuracy: 0.2707 \n",
            "Epoch 00001: val_loss improved from inf to -0.00204, saving model to unet_up2_Aug.h5\n",
            "54/54 [==============================] - 1959s 36s/step - loss: -0.0020 - dice_coef: 0.0020 - accuracy: 0.2707 - val_loss: -0.0020 - val_dice_coef: 0.0020 - val_accuracy: 2.0187e-04\n",
            "Epoch 2/50\n",
            "30/54 [===============>..............] - ETA: 11:37 - loss: -0.0020 - dice_coef: 0.0020 - accuracy: 0.2863"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "KajlhYyUqfCd"
      },
      "source": [
        "### Evaluating the Model Performance"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "Aq7v5IFHmE61",
        "colab": {}
      },
      "source": [
        "model.evaluate(testx,testy)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "xJK_uJv_Q_GB",
        "colab": {}
      },
      "source": [
        "model.save(\"unet_up2_aug_temp.h5\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "Nm5QA2GkFcvK"
      },
      "source": [
        "### Load_Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "IxWkVOS_Fc9-",
        "colab": {}
      },
      "source": [
        "import os\n",
        "os.getcwd()\n",
        "os.chdir('/content/drive/My Drive/results')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "s-_9Qjc4SEiH",
        "colab": {}
      },
      "source": [
        "from keras.models import load_model\n",
        "model2 = load_model(\"unet_up2_Aug.h5\", custom_objects={'dice_coef_loss': dice_coef_loss, 'dice_coef': dice_coef})\n",
        "model2.evaluate(testx,testy)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "fANpgkXO5o-I",
        "colab": {}
      },
      "source": [
        "preds = model2.predict(testx, verbose = 1)\n",
        "preds.shape\n",
        "preds = np.around(preds)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "EevsMCuS6cXP",
        "colab": {}
      },
      "source": [
        "def dice(true, preds):  \n",
        "    scores  = []\n",
        "    for i in range(len(true)):\n",
        "        im1 = true[i]\n",
        "        im2 = preds[i]\n",
        "        intersection = np.logical_and(im1, im2)\n",
        "        score = 2. * intersection.sum() / (im1.sum() + im2.sum())\n",
        "        scores.append(score)\n",
        "    return np.array(scores).mean(), scores"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "rWM7i5dg507b",
        "colab": {}
      },
      "source": [
        "avg_d_score, d_scores = dice(testy, np.around(preds))\n",
        "print(avg_d_score)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "rlRy8Do351De",
        "colab": {}
      },
      "source": [
        "np.mean(d_scores)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "bwBXyIEL8N83",
        "colab": {}
      },
      "source": [
        "idxx=170 #1\n",
        "plt.figure(figsize=(15,15))\n",
        "plt.subplot(131).imshow(testx[idxx][:,:,0])\n",
        "plt.subplot(132).imshow(testy[idxx][:,:,0])\n",
        "plt.subplot(133).imshow(preds[idxx][:,:,0])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "5Ub4VafPqmd_"
      },
      "source": [
        "### Plot Loss and Accuracy"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "j84XbFN6mbUq",
        "colab": {}
      },
      "source": [
        "train_loss = history.history['loss']\n",
        "train_acc = history.history['accuracy']\n",
        "val_loss = history.history['val_loss']\n",
        "val_acc = history.history['val_accuracy']\n",
        "xc=range(len(train_loss))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "Xk_dZo5RmbXq",
        "colab": {}
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "plt.plot(xc, train_loss)\n",
        "plt.plot(xc, val_loss)\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend(['train'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "Q93wB3uymbaY",
        "colab": {}
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "plt.plot(xc, train_acc)\n",
        "plt.plot(xc, val_acc)\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Acc\")\n",
        "plt.legend(['train'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "deletable": true,
        "editable": true,
        "id": "YOWqF3T1qzOY"
      },
      "source": [
        "### Dice Coefficient"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "deletable": true,
        "editable": true,
        "id": "CvecqGe2m1GR",
        "colab": {}
      },
      "source": [
        "test_pred = model.predict(testx, batch_size=32)\n",
        "test_result = np.zeros(test_pred.shape)\n",
        "test_result[test_pred>0.5] = 1\n",
        "test_result[test_pred<=0.5] = 0\n",
        "dice = dc(test_result, testy)\n",
        "pre  = precision(test_result,testy)\n",
        "re   = recall(test_result,testy)\n",
        "print('Test dc: '  + str(dice))\n",
        "print('Test pre: ' + str(pre))\n",
        "print('Test re: '  + str(re))"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}